# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Site Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      product_name:
        required: false
        type: string
  
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true

env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      GITTAG: ${{ github.ref_name }}
    runs-on: appdev-selfhosted

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          
      - name: GitHub Tag Name example
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Environment Variables
        run: |
              if [[ "$REPO_NAME" == "axes-gateway-site-specific" ]]  
              then
               echo "PRODUCT_NAME=axes-gateway">> $GITHUB_ENV               
               echo "OUTPUT=axes-gateway-site-specific-$( echo ${{ github.ref_name }} | cut -d"_" -f2).zip" >> $GITHUB_ENV              
              else
                echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
                echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-$(echo ${{  github.ref_name }} | cut -d"_" -f2).zip" >> $GITHUB_ENV
              fi

              echo "VERSION=$(echo ${{ github.ref_name }} | cut -d"_" -f2)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "CLIENT_DIR=$([[ $(echo ${{ github.ref_name }}) = [A-Z]* ]] && echo $(ls | grep -- $(echo -${{ github.ref_name }} | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]") | rev | cut -c 1- | rev))" >> $GITHUB_ENV
              echo "CLIENT_NAME=$([[ $(echo ${{ github.ref_name }}) = [A-Z]* ]] && echo $(ls | grep -- $(echo -${{ github.ref_name }} | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]") | rev | cut -c 1- | rev | cut -c 1- | rev | cut -d"-" -f 1 | rev ))" >> $GITHUB_ENV              
              
      - name: Environment Variables for web and server
        run: |
              
              echo "WEB_VERSION=$(grep "web_version" $(find ${{ env.CLIENT_DIR }}/snt/ -name product.yml) | awk -F ':' '{print $2}' | sed 's/ //g')" >> $GITHUB_ENV
              echo "SERVER_VERSION=$(grep "server_version" $(find  ${{ env.CLIENT_DIR }}/snt/ -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
              
      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Env Setup for nightly builds off default-branch
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run: |
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              for i in ./*
              do 
                  if [ -d "$i/snt" ]
                  then
                    echo "WEB_VERSION=$(grep "web_version" $(find $i/snt/ -name product.yml) | awk -F ':' '{print $2}' | sed 's/ //g')" >> $GITHUB_ENV
                    echo "SERVER_VERSION=$(grep "server_version" $(find  $i/snt/ -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
                    sed -i "s/${{ env.WEB_VERSION }}/develop/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                    sed -i "s/${{ env.SERVER_VERSION }}/develop/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                  else
                    echo "not a directory"
                 fi
              done
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: check env variables
        run: |
              echo "${{ github.ref_name }}"
              echo "Product Name: ${{ env.PRODUCT_NAME }}"
              echo "Version: ${{ env.VERSION }}"
              echo "Product Base: ${{ env.PRODUCT_BASE }}"
              echo "Output: ${{ env.OUTPUT }}"
              echo "Client Directory: ${{ env.CLIENT_DIR }}"
              echo "Client Name is : ${{ env.CLIENT_NAME }}"
              echo "Web Version: ${{ env.WEB_VERSION }}"
              echo "Server Version: ${{ env.SERVER_VERSION }}"
              if [[ -z  "${{ env.CLIENT_NAME }}" ]]
              then
                echo "Check your Tag naming convention. It should be CLIENTNAME_[a-zA-Z]-[0-9].[0-9].[0-9]"
                exit 1
              fi
              
      - name: Package + Deploy Site
        run: |
             sudo yum install zip
             cd ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/src
             zip -r ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{ env.OUTPUT }} site-specific/*
             echo $(pwd)
             ls -a
             curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/site/${{env.CLIENT_NAME}}/${{env.OUTPUT}}" -T ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{env.OUTPUT}}

      - name: Download server + assign
        run: |
             curl -sSf -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -LO 'https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/server/pom-${{ env.SERVER_VERSION }}.xml'
             echo pom-${{ env.SERVER_VERSION }}.xml
             echo "AUTH_VERSION=$(echo "$(echo "$(grep -m 1 "<auth.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<auth.version>\(.*\)</auth.version>.*:\1:p')")")" >> $GITHUB_ENV
             echo "GENESIS_VERSION=$(echo "$(echo "$(grep -m 1 "<genesis.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<genesis.version>\(.*\)</genesis.version>.*:\1:p')")")" >> $GITHUB_ENV

      - name: Download server, web and latest auth/genesis-distribution from JFROG
        run: |
             mkdir web_downloads
             mkdir server_downloads
             cp ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{env.OUTPUT}} server_downloads
             echo "current directory: $(pwd)"
             echo "files in pwd: $(ls -a)"
             #download auth distribution into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/auth-distribution/"${{env.AUTH_VERSION}}"/auth-distribution-"${{env.AUTH_VERSION}}"-bin.zip
             #download genesis
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/genesis-distribution/"${{ env.GENESIS_VERSION }}"/genesis-distribution-"${{ env.GENESIS_VERSION }}"-bin.zip
             #download server into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/server/genesisproduct-"${{ env.PRODUCT_NAME }}"-"${{ env.SERVER_VERSION }}"-bin.zip
             #download modules into server_downloads folder
            
             cd ${{ env.CLIENT_DIR }}/snt
            
             echo "this is the present directory: $(pwd)"
             if [[ $(grep -c "genesis_modules" ./product.yml) -ge 1 ]]; then   echo "$(sed -e '1,/genesis_modules/d'  < ./product.yml | grep "^  - { ")" > /tmp/edited_product.yml;   while read line; do echo
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/product/$((grep -oP '(?<=name:).*?(?=,)' <<< $line)|awk '$1=$1')/server/genesisproduct-$((grep -oP '(?<=name:).*?(?=,)' <<< $line) | awk '$1=$1')-$((grep -oP '(?<=version: )[^ ]*' <<< $line)|awk '$1=$1' )-bin.zip ;   done < /tmp/edited_product.yml;   rm /tmp/edited_product.yml; fi
             echo "this is the present directory: $(pwd)"
             echo "LIST of FILES: $(ls -a)"             
             
             if [ "${{ env.WEB_VERSION }}" == "" ]; then
               echo "Product Name: ${{ env.PRODUCT_NAME }}"
               echo "PWD after module download: $(pwd)"
               cd ${{ env.PRODUCT_BASE }}
               cd web_downloads
               echo "this is the present directory: $(pwd)"
               echo "List of files in pwd:$(ls -a)"
               #  unzip \*.zip
               touch temp
               tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
               cd ../server_downloads  
             else
               #download web
               echo "PWD after module download: $(pwd)"
               cd ../..
               wget --user=${{ secrets.JFROG_USERNAME }} --password="${{ secrets.JFROG_PASSWORD }}" -P "${{ env.PRODUCT_BASE }}"/web_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/web/"${{ env.PRODUCT_NAME }}"-web-"${{ env.WEB_VERSION }}".zip
               cd web_downloads
               echo "this is the present directory: $(pwd)"
               echo "List of files in pwd:$(ls -a)"
               unzip \*.zip
               tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
               cd ../server_downloads   
             fi
             echo "displaying files in server_downloads folder: $(ls -a)"
             unzip \*.zip
             ls
             rm *.zip
             tar czvf /tmp/genesis_${{env.PRODUCT_NAME}}_package.tar.gz *
             ls -lart /tmp/*.tar*
        env:
          JAVA_TOOL_OPTIONS: ${{'-Xmx8192m' }}
          
      - name: Create RPM
        run: |
            sudo yum install rpm
            touch pom.xml
            rm pom.xml
            echo "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3QgeG1sbnM9Imh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZCI+CiAgICA8bW9kZWxWZXJzaW9uPjQuMC4wPC9tb2RlbFZlcnNpb24+CiAgICA8Z3JvdXBJZD5nbG9iYWwuZ2VuZXNpczwvZ3JvdXBJZD4KICAgIDxhcnRpZmFjdElkPmdlbmVzaXMtcnBtPC9hcnRpZmFjdElkPgogICAgPHZlcnNpb24+MS4wLjA8L3ZlcnNpb24+CiAgICA8cGFja2FnaW5nPnBvbTwvcGFja2FnaW5nPgogICAgPG5hbWU+Z2VuZXNpcy1ycG08L25hbWU+CiAgICA8cHJvcGVydGllcz4KCQk8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz4KCTwvcHJvcGVydGllcz4KICAgIDxtb2R1bGVzLz4KICAgIDxidWlsZD4KICAgICAgICA8cGx1Z2lucz4KICAgICAgICAgICAgPHBsdWdpbj4KICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5jb2RlaGF1cy5tb2pvPC9ncm91cElkPgogICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+cnBtLW1hdmVuLXBsdWdpbjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgIDx2ZXJzaW9uPjIuMi4wPC92ZXJzaW9uPgogICAgICAgICAgICAgICAgPGluaGVyaXRlZD5mYWxzZTwvaW5oZXJpdGVkPgogICAgICAgICAgICAgICAgPGNvbmZpZ3VyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+Z2VuZXNpcy1QUk9EVUNUPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDxsaWNlbnNlPihjKSBnZW5lc2lzLmdsb2JhbDwvbGljZW5zZT4KICAgICAgICAgICAgICAgICAgICA8bmVlZGFyY2g+eDg2XzY0PC9uZWVkYXJjaD4KICAgICAgICAgICAgICAgICAgICA8Z3JvdXA+R2VuZXNpcyBQbGF0Zm9ybTwvZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgPHBvc3RpbnN0YWxsU2NyaXB0bGV0PgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0RmlsZT4vdG1wL2luc3RhbGwuc2g8L3NjcmlwdEZpbGU+CiAgICAgICAgICAgICAgICAgICAgPC9wb3N0aW5zdGFsbFNjcmlwdGxldD4KICAgICAgICAgICAgICAgICAgICA8bWFwcGluZ3M+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtYXBwaW5nPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpcmVjdG9yeT4vdG1wLzwvZGlyZWN0b3J5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZpbGVtb2RlPjc1MDwvZmlsZW1vZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlcm5hbWU+cm9vdDwvdXNlcm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBuYW1lPnJvb3Q8L2dyb3VwbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2VzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbj4vdG1wL2dlbmVzaXNfUFJPRFVDVF9wYWNrYWdlLnRhci5nejwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFwcGluZz4KICAgICAgICAgICAgICAgICAgICAgICAgPG1hcHBpbmc+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGlyZWN0b3J5Pi90bXAvPC9kaXJlY3Rvcnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsZW1vZGU+NzUwPC9maWxlbW9kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1c2VybmFtZT5yb290PC91c2VybmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxncm91cG5hbWU+cm9vdDwvZ3JvdXBuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uPi90bXAvZ2VuZXNpc19QUk9EVUNUX3dlYi50YXIuZ3o8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc291cmNlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2VzPgogICAgICAgICAgICAgICAgICAgICAgICA8L21hcHBpbmc+CiAgICAgICAgICAgICAgICAgICAgPC9tYXBwaW5ncz4KICAgICAgICAgICAgICAgIDwvY29uZmlndXJhdGlvbj4KICAgICAgICAgICAgPC9wbHVnaW4+CiAgICAgICAgPC9wbHVnaW5zPgogICAgPC9idWlsZD4KPC9wcm9qZWN0Pg==" | base64 -d > pom.xml
            sed -i "s/PRODUCT/$PRODUCT_NAME/g" pom.xml
            if [ $(test -f /tmp/install.sh && echo 1 || echo 0) -eq 1  ]
            then
              rm /tmp/install.sh
            fi           
            echo "install.sh start"
            echo "" | base64 -d > /tmp/install.sh
            sed -i "s/product_name/$PRODUCT_NAME/g" /tmp/install.sh
            echo "Replace the generic users in the install script with the client user used for installation ...."
            if [[ "$PRODUCT_NAME" == "wm_aqs" ]]
            then
                sed -i "s/genesisUser/aqs/g" /tmp/install.sh
            else
                sed -i "s/genesisUser/$(echo $PRODUCT_NAME | sed -E 's/[0-9]+//g')/g" /tmp/install.sh
            fi
            source ~/.bashrc
            mvn versions:set -DnewVersion=$VERSION
            mvn rpm:rpm

      - name: Upload RPM
        run: |
          echo "PRODUCT NAME: ${{ env.PRODUCT_NAME }}"
          echo "RPM NAME: ${{ env.RPM_NAME }}"
          ls target/rpm/
          cd target/rpm/genesis-${PRODUCT_NAME}/RPMS/x86_64/${RPM_NAME}
          ls -lart
          echo "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/"
          curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/" -T *.rpm
