# This is a workflow calling the steps-jobs from appdev-devops repo which has the main file
name: Build RPM

on:
  workflow_call:
    outputs:
      rpm_name:
        description: "The first output string"
        value: ${{ jobs.build.outputs.rpm_name }}
    inputs:
      product_name:
        required: true
        type: string
      version:
        required: true
        type: string
      artifactory_deploy_locations:
        required: true
        type: string
        description: Comma separated list of folders in Artifactory to deploy the RPM
      server-distribution:
        required: true
        type: string
        description: Server tar file
      client-distribution:
        required: true
        type: string
        description: Client tar file
      site-distribution:
        required: false
        type: string
        description: Optional site-specific override
      site-clientdistribution:
        required: false
        type: string
        description: Optional
      genesis-user:
        required: true
        type: string
        description: User to login as when installed
      spec-file-branch:
        required: false
        type: string
        description: Branch to get the spec file from
      nginx-conf:
        required: false
        type: string
        description: Optional nginx override

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_PASSWORD:
        required: true
      SLACK_WEBHOOK:
        required: false

env:
  JFROG_USERNAME: ${{ secrets.JFROG_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

# A workflow run is called from the devops appdev-workflow repos
jobs:
  build:
    runs-on: appdev-selfhosted
    outputs:
      rpm_name: ${{ steps.upload-rpm.outputs.uploaded_rpm_name }}
    steps:
      - name: Grab spec file
        uses: actions/checkout@v3
        with:
          repository: genesislcap/appdev-workflows
          fetch-depth: 2
          ref: ${{ inputs.spec-file-branch }}

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          path: base-repo

      - name: Setup
        working-directory: rpm
        run: |
          rm -rf ~/rpmbuild/*
          sudo yum -y install rpm
          sudo yum -y install rpm-build
          sudo yum -y install wget
          mkdir downloads
          mkdir web-downloads

      - name: Downloads
        working-directory: rpm/downloads
        run: |
          wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" https://genesisglobal.jfrog.io/artifactory/${{ inputs.server-distribution }}

      - name: Optional site download
        if: inputs.site-distribution
        working-directory: rpm/downloads
        run: |
          wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" https://genesisglobal.jfrog.io/artifactory/${{ inputs.site-distribution }}

      - name: Server Package
        working-directory: rpm/downloads
        run: |
          VERSION=$(echo "${{ inputs.version }}" | tr '-' '_')
          ls -al
          tar xf genesis_*.tar.gz
          rm genesis_*.tar.gz
          if ls *octopus-config*.zip 1> /dev/null 2>&1; then
            echo "Detected octopus-config override, using that one"

            rm -rf site-specific

            echo A | unzip -q *octopus-config*.zip

            mkdir site-specific

            clientdistribution=${{ inputs.site-clientdistribution }}

            cp -r "$clientdistribution"/* site-specific/

            find . -mindepth 1 -maxdepth 1 -type d ! -name "site-specific" -exec rm -rf {} +

            rm *.zip

            echo "Processing complete"
          fi

          echo "Zipping package"
          tar cf server-$VERSION.tar.gz *
          ls -al
          echo "Unzipping tar as a test"
          tar xf server-$VERSION.tar.gz
          mv *.tar.gz ../
          ls -al

      - name: Web Download and Package
        working-directory: rpm/web-downloads
        run: |
          VERSION=$(echo "${{ inputs.version }}" | tr '-' '_')
          wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" https://genesisglobal.jfrog.io/artifactory/${{ inputs.client-distribution }}
          unzip -q *web*.zip
          rm *.zip
          ls -al
          if [ -n "${{ inputs.nginx-conf }}" ]; then
            cp "${GITHUB_WORKSPACE}/base-repo/${{ inputs.nginx-conf }}" ./nginx.conf
          fi
          echo "Zipping package"
          tar cf web-$VERSION.tar.gz *
          ls -al
          echo "Unzipping tar as a test"
          tar xf web-$VERSION.tar.gz
          mv *.tar.gz ../

      - name: Build RPM
        working-directory: rpm
        run: |
          VERSION=$(echo "${{ inputs.version }}" | tr '-' '_')
          ls -al
          rm -rf web-downloads downloads
          sed -i "s/1.0.0/$VERSION/g" product.spec
          sed -i "s/PRODUCT/${{ inputs.product_name }}/g" product.spec
          sed -i "s/genesisUser/$(echo ${{ inputs.genesis-user }})/g" product.spec
          mkdir -p ~/rpmbuild/SOURCES/
          mv *.gz ~/rpmbuild/SOURCES/
          mv product.spec ~/rpmbuild/SOURCES/
          cd ~/rpmbuild/SOURCES/
          rpmbuild -bb product.spec

      - name: Upload RPM
        run: |
          cd ~/rpmbuild/SRPMS/
          ls -al
          IFS=',' read -ra locations <<< "${{ inputs.artifactory_deploy_locations }}"

          # Iterate over the locations and deploy the RPMs
          for location in "${locations[@]}"; do
              curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/$location" -T $HOME/rpmbuild/RPMS/noarch/*.rpm
          done

      - name: GET  RPM NAME
        id: upload-rpm
        run: |
          cd ~/rpmbuild/RPMS/noarch/
          ls -al
          uploaded_rpm_name=$(ls -1 *.rpm)
          echo "uploaded_rpm_name=$uploaded_rpm_name" >> $GITHUB_OUTPUT

      - name: Notify failure on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: failure() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ❌ RPM build for ${{ inputs.product_name }} failed
          SLACK_MESSAGE: The RPM build for ${{ github.workflow }} failed https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.run_number }}
          SLACK_CHANNEL: ${{ inputs.product_name }}-build-notifications

      - name: Notify success on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: success() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ✅ RPM build for ${{ inputs.product_name }} passed
          SLACK_MESSAGE: The RPM build for ${{ github.workflow }} passed https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.run_number }}
          SLACK_CHANNEL: ${{ inputs.product_name }}-build-notifications
