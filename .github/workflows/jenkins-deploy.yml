name:  Trigger Jenkins job to deploy RPM

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
      client:
        required: true
        type: string
      environment:
        required: true
        type: string
      hosts:
        required: false
        type: string
        default: "ALL"

      db_backup:
        required: false
        type: boolean

      run_clear_codegen_cache:
        required: false
        type: boolean

      run_genesis_install:
        required: false
        type: boolean

      run_install_hooks:
        required: false
        type: boolean

      run_remap:
        required: false
        type: boolean

      start_server:
        required: false
        type: boolean

      genesis_user:
        required: false
        type: string

      environment_level:
        required: false
        type: string

      product:
        required: false
        type: string

      package_version:
        required: false
        type: string

      repotype:
        required: false
        type: string

      testautomation_build:
        required: false
        default: false
        type: boolean

    secrets:
      JENKINS_SECURITYTOKEN:
        required: true
      JENKINS_TOKEN:
        required: false
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Steps to trigger jenkins job
    runs-on: appdev-selfhosted-al2023
    environment: master

    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ inputs.branch }}

      - name: Trigger Jenkins Job
        run: |
          curl -X POST "https://jenkinsdev.cdservice.genesis.global/buildByToken/buildWithParameters?token=${{ secrets.JENKINS_SECURITYTOKEN }}&job=AppDev-CI_CD/${{ inputs.product }}/${{ inputs.environment_level }}/product_${{ inputs.product }}_upgrade" \
            --data-urlencode "client=${{ inputs.CLIENT }}" \
            --data-urlencode "environment=${{ inputs.ENVIRONMENT }}" \
            --data-urlencode "hosts=${{ inputs.HOSTS }}" \
            --data-urlencode "package_version=${{ inputs.PACKAGE_VERSION }}" \
            --data-urlencode "db_backup=${{ inputs.DB_BACKUP }}" \
            --data-urlencode "run_clear_codegen_cache=${{ inputs.RUN_CLEAR_CODEGEN_CACHE }}" \
            --data-urlencode "run_genesis_install=${{ inputs.RUN_GENESIS_INSTALL }}" \
            --data-urlencode "run_install_hooks=${{ inputs.RUN_INSTALL_HOOKS }}" \
            --data-urlencode "run_remap=${{ inputs.RUN_REMAP }}" \
            --data-urlencode "start_server=${{ inputs.START_SERVER }}" \
            --data-urlencode "genesis_user=${{ inputs.GENESIS_USER }}" \
            --data-urlencode "environment_level=${{ inputs.environment_level }}" \
            --data-urlencode "product=${{ inputs.PRODUCT }}" \
            --data-urlencode "repotype=${{ inputs.repotype }}"

      - name: Install jq
        if: ${{ !inputs.testautomation_build }}
        run: sudo dnf install -y jq 

      - name: Poll Jenkins for Job Status
        if: ${{ !inputs.testautomation_build }}
        run: |
          JOB_STATUS=""
          JOB_URL="https://jenkinsdev.cdservice.genesis.global/job/AppDev-CI_CD/job/${{ inputs.product }}/job/${{ inputs.environment_level }}/job/product_${{ inputs.product }}_upgrade/lastBuild/api/json"
          
          while [ -z "$JOB_STATUS" ] || [ "$JOB_STATUS" == "null" ]; do
            RESPONSE=$(curl -s -u "purna.sakhamuri:${{ secrets.JENKINS_TOKEN }}" "$JOB_URL")
            JOB_STATUS=$(echo "$RESPONSE" | jq -r .result)
            echo "Current status: $JOB_STATUS"
            
            if [ "$JOB_STATUS" == "SUCCESS" ]; then
              echo "Jenkins job completed successfully."
              exit 0
            elif [ "$JOB_STATUS" == "FAILURE" ]; then
              echo "Jenkins job failed."
              exit 1
            elif [ "$JOB_STATUS" == "ABORTED" ]; then
              echo "Jenkins job was aborted."
              exit 2
            elif [ -z "$JOB_STATUS" ] || [ "$JOB_STATUS" == "null" ]; then
              echo "Job is still running..."
              sleep 10
            fi
          done
