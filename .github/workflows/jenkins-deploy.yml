name:  Trigger Jenkins job to deploy RPM

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
      client:
        required: true
        type: string
      environment:
        required: true
        type: string
      hosts:
        required: false
        type: string
        default: "ALL"

      db_backup:
        required: false
        type: boolean

      run_clear_codegen_cache:
        required: false
        type: boolean

      run_genesis_install:
        required: false
        type: boolean

      run_install_hooks:
        required: false
        type: boolean

      run_remap:
        required: false
        type: boolean

      start_server:
        required: false
        type: boolean

      genesis_user:
        required: false
        type: string

      environment_level:
        required: false
        type: string

      product:
        required: false
        type: string

      package_version:
        required: false
        type: string

      repotype:
        required: false
        type: string

    secrets:
      JENKINS_SECURITYTOKEN:
        required: true
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Steps to trigger jenkins job
    runs-on: appdev-selfhosted-al2023

    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ inputs.branch }}

      - name: Trigger Jenkins Job
        id: trigger_jenkins
        run: |
          response=$(curl -X POST "https://jenkinsdev.cdservice.genesis.global/buildByToken/buildWithParameters?token=***&job=AppDev-CI_CD/cpri/qa/product_cpri_upgrade" \
            --data-urlencode "client=rmb" \
            --data-urlencode "environment=plt-cpri-rmb-qa" \
            --data-urlencode "hosts=ALL" \
            --data-urlencode "package_version=s3/rmb/genesis-cpri-DCD_1629-1.amzn2023.noarch.rpm" \
            --data-urlencode "db_backup=false" \
            --data-urlencode "run_clear_codegen_cache=true" \
            --data-urlencode "run_genesis_install=true" \
            --data-urlencode "run_install_hooks=true" \
            --data-urlencode "run_remap=true" \
            --data-urlencode "start_server=true" \
            --data-urlencode "genesis_user=cpri" \
            --data-urlencode "environment_level=qa" \
            --data-urlencode "product=cpri" \
            --data-urlencode "repotype=" \
            --silent --write-out "%{http_code}" --output /dev/null)

          if [ "$response" -ne 201 ]; then
            echo "Failed to trigger Jenkins job. HTTP response code: $response"
            exit 1
          fi

          # Trigger Jenkins Job and Capture Queue URL
          queue_url=$(curl -s -X POST "https://jenkinsdev.cdservice.genesis.global/buildByToken/buildWithParameters?token=***&job=AppDev-CI_CD/cpri/qa/product_cpri_upgrade" \
            --data-urlencode "client=rmb" \
            --data-urlencode "environment=plt-cpri-rmb-qa" \
            --data-urlencode "hosts=ALL" \
            --data-urlencode "package_version=s3/rmb/genesis-cpri-DCD_1629-1.amzn2023.noarch.rpm" \
            --data-urlencode "db_backup=false" \
            --data-urlencode "run_clear_codegen_cache=true" \
            --data-urlencode "run_genesis_install=true" \
            --data-urlencode "run_install_hooks=true" \
            --data-urlencode "run_remap=true" \
            --data-urlencode "start_server=true" \
            --data-urlencode "genesis_user=cpri" \
            --data-urlencode "environment_level=qa" \
            --data-urlencode "product=cpri" \
            --data-urlencode "repotype=" \
            --output /dev/null -I -L -w "%{url_effective}")

          echo "Queue URL: $queue_url"

          # Extracting job ID from queue URL
          if [[ "$queue_url" =~ /queue/item/([0-9]+) ]]; then
            job_id=${BASH_REMATCH[1]}
            echo "Jenkins Job ID: $job_id"
          else
            echo "Failed to extract Jenkins Job ID. Queue URL: $queue_url"
            exit 1
          fi
