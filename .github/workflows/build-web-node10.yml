# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Web Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      product_name:
        required: false
        type: string
        
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      JFROG_NPM_AUTH_TOKEN:
        required: true
      GPR_READ_TOKEN:
        required: true
    
env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      JFROG_NPM_AUTH_TOKEN: ${{secrets.JFROG_NPM_AUTH_TOKEN}}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [10.x]
    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Env Setup
        run:  |
              echo "REPO_NAME=$(git config --get remote.origin.url | cut -d'.' -f2 | cut -d'/' -f2 | xargs)" >> $GITHUB_ENV
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d'.' -f2 | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "VERSION=$( git describe --tag --abbrev=0)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(readlink -f $(find . -name angular.json) | rev | cut -c14- | rev)" >> $GITHUB_ENV
              echo "PACKAGE_NAME=$(grep outputPath $(find . -name angular.json) | cut -d'/' -f2 | rev | cut -c3- | rev)" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d'.' -f2 | cut -d'/' -f3 | cut -d'-' -f1 | cut -d"_" -f2)-web-$(git describe --tags --abbrev=0).zip" >> $GITHUB_ENV
              
      - name: Env Setup for nightly build
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' }}
        run:  |
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d'.' -f2 | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f2)-web-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention
              
      - name: Sonar Setup
        run:  |
              echo "Sonar Setup:"
              date
              
              echo "sonar.projectKey="${{ env.REPO_NAME }} > sonar-project.properties
              echo "sonar.sources="${{ env.PRODUCT_BASE }}"/src" >> sonar-project.properties
              
      - name: Artifactory Setup
        run: |
              echo "Artifactory:"
              date
              #chmod 664 /usr/local/etc/npmrc
              npm config set @genesisglobal:registry https://genesisglobal.jfrog.io/artifactory/api/npm/npm-local/
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:always-auth true
              cat ~/.npmrc
              
      - name: Configure Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://npm.pkg.github.com/
          scope: '@genesislcap'

      - name: Bootstrap
        run: |
            cd $PRODUCT_BASE
            pwd
            npm install
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}   

      - name: Build Debug
        run: |
            cd ${{ env.PRODUCT_BASE }}
            rm -rf ${{ env.PRODUCT_BASE }}/dist
            node --max_old_space_size=2350 .//node_modules//@angular//cli//bin//ng build --base-href=/debug/
            mv ${{ env.PRODUCT_BASE }}/dist/${{ env.PACKAGE_NAME }} ${{ env.PRODUCT_BASE }}/dist/debug
            
      - name: Build Prod
        run: |
            cd ${{ env.PRODUCT_BASE }}
            pwd
            node --max_old_space_size=2350 .//node_modules//@angular//cli//bin//ng build --prod=true --base-href=/
    
      - name: Lint Check
        run: |
          echo "LINT_CHECK=$(grep -Fxq "lint" $(cat package.json))" >> $GITHUB_ENV
          
      - name: ESLint
        if: ${{env.LINT_CHECK==1 }} 
        run: npm run lint:eslint:all
          
      - name: Package and Publish
        run:  |
              echo "Package:"
              date
              sudo apt-get install zip unzip
              echo $(pwd)
              
              mv ${{ env.PRODUCT_BASE }}/dist/debug ${{ env.PRODUCT_BASE }}/dist/${{ env.PACKAGE_NAME }}/.
              cd ${{ env.PRODUCT_BASE }}/dist/${{ env.PACKAGE_NAME }}/
              zip -r ${{ env.PRODUCT_BASE }}/${{ env.OUTPUT }} *
              cd ${{ env.PRODUCT_BASE }}
              pwd
              echo ${{ env.OUTPUT }}
              ls -lrt
              curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/web/${{ env.OUTPUT }}" -T ${{ env.OUTPUT }} -v
