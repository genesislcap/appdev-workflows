# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Web Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      product_name:
        required: false
        type: string
      branch:
        required: false
        type: string

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      JFROG_NPM_AUTH_TOKEN:
        required: true
      GPR_READ_TOKEN:
        required: true
      SLACK_WEBHOOK:
        required: false

env:
  REPO_NAME: ${{ inputs.repo_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    name: Steps to build the artifact and upload it to jfrog
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      JFROG_NPM_AUTH_TOKEN: ${{secrets.JFROG_NPM_AUTH_TOKEN}}
    runs-on: appdev-selfhosted-al2023

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - name: Env Setup
        run:  |
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "VERSION=$( git describe --tag --abbrev=0)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-web-$(git describe --tags --abbrev=0).zip" >> $GITHUB_ENV

      - name: Env Setup for nightly build
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run:  |
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-web-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Sonar Setup
        run:  |
              echo "Sonar Setup:"
              date

              echo "sonar.projectKey="${{ env.REPO_NAME }} > sonar-project.properties
              echo "sonar.sources="${{ env.PRODUCT_BASE }}"/src" >> sonar-project.properties

      - name: Configure Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Artifactory Setup
        run: |
              echo "Artifactory:"
              date
              npm config set @genesisglobal:registry https://genesisglobal.jfrog.io/artifactory/api/npm/npm-local/
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:always-auth true

      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Install and NPM Config
        run:  |
              npm config set @genesisglobal:registry https://genesisglobal.jfrog.io/artifactory/api/npm/npm-local/
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:username ${{secrets.JFROG_USERNAME}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:_auth ${{secrets.JFROG_NPM_AUTH_TOKEN}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:email ${{secrets.JFROG_EMAIL}}
              npm config set //genesisglobal.jfrog.io/artifactory/api/npm/npm-local/:always-auth true
              echo "**************************************************************************************************************"
              echo "Install:"
              echo "**************************************************************************************************************"
              npm i
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}


      - name: Build
        run: |
              echo "Building Prod:"
              echo $(pwd)
              date
              npm run build
              pwd
              ls -larth
              echo "**************************************************************************************************************"
              ls -lrt www
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}

      - name: Lint Check
        run: |
          echo "LINT_CHECK=$(grep -Fxq "lint" package.json; echo $?)" >> $GITHUB_ENV

      - name: Run ESLint
        if: ${{env.LINT_CHECK==1 }}
        run: npm run lint > lint-output.txt || echo "Linting completed with errors"

      - name: Upload lint artifact
        uses: actions/upload-artifact@v2
        with:
          name: Lint errors
          path: lint-output.txt

      - name: Package and Publish
        run:  |
              echo "Package:"
              date
              sudo yum install zip unzip
              echo $(pwd)
              ln -s ./src/ src
              cd ./www
              ls
              pwd
              zip -r ${{ env.OUTPUT }} *
              ls
              pwd
              echo ${{ env.OUTPUT }}
              ls | grep zip
              curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/web/${{ env.OUTPUT }}" -T ${{ env.OUTPUT }} -v

      - name: Notify failure on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: failure() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ❌ Web build for ${{ env.PRODUCT_NAME }} failed
          SLACK_MESSAGE: The Web build for ${{ github.workflow }} failed https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}
          SLACK_CHANNEL: ${{ env.PRODUCT_NAME }}-build-notifications

      - name: Notify success on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: success() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ✅ Web build for ${{ env.PRODUCT_NAME }} passed
          SLACK_MESSAGE: The Web build for ${{ github.workflow }} passed https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}
          SLACK_CHANNEL: ${{ env.PRODUCT_NAME }}-build-notifications
