# This is a workflow calling the steps-jobs from appdev-devops repo which has the main file
name: Gradle Build

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
      product_name:
        required: true
        type: string
      version:
        required: false
        type: string
      upload:
        required: false
        type: boolean
        default: true
      build_docker:
        required: false
        default: false
        type: boolean
      java_version:
        required: false
        default: '11'
        type: string

    secrets:
      GRADLE_PROPERTIES:
        required: true
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      GPR_READ_TOKEN:
        required: true

env:
  NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}

# A workflow run is called from the devops appdev-workflow repos
jobs:
  build:
    runs-on: [ appdev-selfhosted ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: ${{ inputs.branch }}

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: ${{ inputs.java_version }}
          distribution: 'adopt'

      - name: Configure Node
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: https://npm.pkg.github.com/
          scope: '@genesislcap'

      - name: Restore gradle.properties and setup
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "genesisArtifactoryUser=${{ secrets.JFROG_USERNAME }}" > ~/.gradle/gradle.properties
          echo "genesisArtifactoryPassword=${{ secrets.JFROG_PASSWORD }}" >> ~/.gradle/gradle.properties

          echo "dockerUrl=genesisglobal-docker-internal.jfrog.io" >> ~/.gradle/gradle.properties
          echo "dockerUsername=${{ secrets.JFROG_USERNAME }}" >> ~/.gradle/gradle.properties
          echo "dockerPassword=${{ secrets.JFROG_PASSWORD }}" >> ~/.gradle/gradle.properties
          echo "dockerEmail=platformmanageteam@genesis.global" >> ~/.gradle/gradle.properties

          echo "genesis-home=../.genesis-home" >> ~/.gradle/gradle.properties
          echo "deploy-plugin-mode=local" >> ~/.gradle/gradle.properties
          sudo chmod +x ./gradlew
          sudo chmod +x ./server/jvm/gradlew
          cat ~/.gradle/gradle.properties >>  ./gradle.properties
          echo "REPO_NAME=$(echo "${{ github.event.repository.name }}" | cut -d"-" -f1)" >> $GITHUB_ENV
          RELEASE_VERSION=$(echo "${{ inputs.version }}" | sed 's/\//-/g')
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
          sed -E -i "s/^\s{4}version = \".+\"/    version = \"${RELEASE_VERSION}\"/g" server/jvm/build.gradle.kts

      - name: Server Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build --no-build-cache --stacktrace
          build-root-directory: ./server/jvm
          cache-disabled: true

      - name: List Contents of Test Directories
        run: |
          ls -R /opt/actions-runner/_work/${{ inputs.product_name }}/${{ inputs.product_name }}/server/jvm/*/build/reports/tests/test/
        if: always()

      - name: Copy Test Reports
        run: |
          mkdir -p test-results
          for dir in /opt/actions-runner/_work/${{ inputs.product_name }}/${{ inputs.product_name }}/server/jvm/*/build/reports/tests/test/; do
            if [ -d "$dir" ]; then
              subfolder_name=$(basename "$dir")
              mkdir -p "test-results/$subfolder_name"
              cp -r "$dir"/* "test-results/$subfolder_name/"
            fi
          done
        if: always()


      - name: Upload Test Reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: test-results



      - name: Docker Build Image
        if: inputs.build_docker
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :genesisproduct-${{ inputs.product_name }}:${{ inputs.product_name }}-deploy:buildImage
          build-root-directory: ./
          cache-disabled: true

      - name: Docker Push Image
        if: inputs.build_docker
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :genesisproduct-${{ inputs.product_name }}:${{ inputs.product_name }}-deploy:pushImage
          build-root-directory: ./
          cache-disabled: true

      - name: Create Giant Server Zip
        if: inputs.upload
        shell: bash
        working-directory: server/jvm/
        run: |
          ./gradlew tasks | grep install- | cut -d " " -f1 | xargs ./gradlew
          cd .genesis-home
          pwd
          ls -la
          tar czvf ../${{ inputs.product_name }}-distribution/build/distributions/genesis_${{ inputs.product_name }}_package-${{ env.RELEASE_VERSION }}.tar.gz *

      - name: Upload Server Package
        if: inputs.upload
        working-directory: server/jvm/${{ inputs.product_name }}-distribution/build/distributions/
        run: |
          echo "${{ env.REPO_NAME }}"
          curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.REPO_NAME }}/server/" -T genesisproduct*.zip
          curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.REPO_NAME }}/server/" -T genesis_${{ inputs.product_name }}_package-${{ env.RELEASE_VERSION }}.tar.gz

      - name: Check file existence
        id: web_exists
        working-directory: .
        run: |
          test -d client/web && echo "web_exists=true" >> $GITHUB_OUTPUT || exit 0

      - name: Client Build
        if: steps.web_exists.outputs.web_exists
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :client:web:assembleDist --no-build-cache -Pversion=${{ env.RELEASE_VERSION }}
          build-root-directory: ./
          cache-disabled: true

      - name: Upload Client Package
        if: inputs.upload && steps.web_exists.outputs.web_exists
        working-directory: client/web/build/distributions
        run: |
          mv web-distribution-${{ env.RELEASE_VERSION }}.zip ${{ env.REPO_NAME }}-web-${{ env.RELEASE_VERSION }}.zip
          curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.REPO_NAME }}/web/" -T *.zip
