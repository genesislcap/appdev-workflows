name: gradle-Build-workflow
on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      product_name:
        required: false
        type: string

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      JFROG_NPM_AUTH_TOKEN:
        required: true
      GPR_READ_TOKEN:
        required: true
      GRADLE_PROPERTIES:
        required: true
      SLACK_WEBHOOK:
        required: false

env:
  REPO_NAME: ${{ inputs.repo_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: appdev-selfhosted-al2023
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - uses: actions/checkout@v3
        with:
          repository: genesislcap/appdev-workflows
          path: ./rpm
          sparse-checkout: |
            rpm/legacy

      - name: Configure Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Bootstrap
        working-directory: ./client
        run: npm run bootstrap
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}

      - name: Build
        working-directory: ./client/web
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{secrets.GPR_READ_TOKEN}}

      - name: Run ESLint
        working-directory: ./client
        run: npm run lint > lint-output.txt || echo "Linting completed with errors"

      - name: Upload lint artifact
        uses: actions/upload-artifact@v4
        with:
          name: Lint errors
          working-directory: ./client
          path: lint-output.txt

      - name: Env Set-Up
        run:  |
             echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV
             echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-web-$(git describe --tags | cut -d"_" -f2).zip" >> $GITHUB_ENV

      - name: Web Env Set-Up for nightly job
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' }}
        run:  |
             echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-web-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Set Genesis User
        run: |
              echo "GENESIS_USER=$(echo "${{ env.PRODUCT_NAME }}" | sed -E 's/[0-9]+//g')" >>$GITHUB_ENV

      - name: Change Version in config files
        run: |
              sed 's/version = \"1.0.0-SNAPSHOT\"//g' server/jvm/${{ env.PRODUCT_NAME }}-site-specific/build.gradle.kts
              sed -i 's/version = \"1.0.0-SNAPSHOT\"//g' server/jvm/${{ env.PRODUCT_NAME }}-site-specific/build.gradle.kts
              sed 's/version = \"1.0.0-SNAPSHOT\"//g' server/jvm/build.gradle.kts
              sed -i 's/version = \"1.0.0-SNAPSHOT\"//g' server/jvm/build.gradle.kts

      - name: Package and Publish
        run:  |
              echo "Package:"
              date
              sudo yum install zip unzip
              echo $(pwd)
              ln -s packages/apps/${{ env.PRODUCT_NAME }}/src/ src
              cd client/web/dist
              zip -r ${{ env.OUTPUT }} *
              pwd
              echo ${{ env.OUTPUT }}
              ls | grep zip
              curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/web/${{ env.OUTPUT }}" -T ${{ env.OUTPUT }} -v

      - name: Restore gradle.properties
        env:
          GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
        shell: bash
        run: |
          mkdir -p ~/.gradle/
          echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
          echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties
          cat ~/.gradle/gradle.properties

      - name: Env Set-Up
        run: |
           echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV
           echo "VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV

      - name: Server Env Set-Up for nightly job 1
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' }}
        run:  |
           echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV

      - name: Build the Server app
        working-directory: ./server/jvm
        run: |
         chmod +x ./gradlew
         cat ~/.gradle/gradle.properties >>  ./gradle.properties
         if [ -f "build.gradle.kts" ]  &&  grep "version = "  build.gradle.kts ; then
             val1=$(grep -n   "version = "  test.kts | cut -d':' -f1)
             sed -i "$val1 d" build.gradle.kts
         else
             echo "Version is not set in the build.gradle.kts file"
         fi
         ./gradlew assemble -Pversion=${{ env.VERSION }}

      - name: Publish to Artifactory
        run: |
            cd server/jvm/${{ env.PRODUCT_NAME }}-distribution/build/distributions/
            curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/server/" -T *.zip

      ##- name: Depcheck
      ##  uses: dependency-check/Dependency-Check_Action@1.0.0
      ##  id: Depcheck
      ##  with:
      ##    project: ${{ inputs.repo_name }}
      ##    path: '.'
      ##    format: 'HTML'
      ##  env:
      ##    JAVA_HOME: /opt/jdk

      - name: 'Publish Test Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'DependencyCheck-Report'
          path: ${{github.workspace}}/reports

      - name: Environment Variables
        run: |
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "OUTPUTSITE=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-$(git describe --tags).zip" >> $GITHUB_ENV
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-$(grep "site_version" $(find . -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g').zip" >> $GITHUB_ENV
              echo "CLIENT_DIR=$([[ $(git describe --tags) = [A-Z]* ]] && echo $(ls | grep -- $(echo -$(git describe --tags | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]")) | rev | cut -c 1- | rev))" >> $GITHUB_ENV
              echo "CLIENT_NAME=$([[ $(git describe --tags) = [A-Z]* ]] && echo $(git describe --tags | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]") || echo genesis)" >> $GITHUB_ENV
              echo "WEB_VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV
              echo "SERVER_VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV
              echo "HOME=$(pwd)" >> $GITHUB_ENV
              echo "SITE_OUTPUT=$(echo "${{ env.PRODUCT_NAME }}-site-specific-${{ env.SERVER_VERSION }}")" >> $GITHUB_ENV

      - name: Environment Variables1
        run: |
              echo "SITE_OUTPUT=$(echo "${{ env.PRODUCT_NAME }}-site-specific-${{ env.SERVER_VERSION }}.zip")" >> $GITHUB_ENV

      - name: Server Env Set-Up for nightly job
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' }}
        run:  |
             echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
             echo "WEB_VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
             echo "SERVER_VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
             echo "OUTPUTSITE=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-${{ inputs.branch }}.zip" >> $GITHUB_ENV
             echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-${{ inputs.branch }}.zip" >> $GITHUB_ENV
             echo "SITE_OUTPUT=$(echo "${{ env.PRODUCT_NAME }}-site-specific-${{ inputs.branch }}.zip")" >> $GITHUB_ENV

      - name: check env variables
        run: |
              echo "$(git describe --tags)"
              echo "Product Name: ${{ env.PRODUCT_NAME }}"
              echo "Version: ${{ env.VERSION }}"
              echo "Product Base: ${{ env.PRODUCT_BASE }}"
              echo "Output: ${{ env.OUTPUT }}"
              echo "Outputsite: ${{ env.OUTPUTSITE }}"
              echo "Client Directory: ${{ env.CLIENT_DIR }}"
              echo "Client Name is : ${{ env.CLIENT_NAME }}"
              echo "Web Version: ${{ env.WEB_VERSION }}"
              echo "Server Version: ${{ env.SERVER_VERSION }}"
              echo "AUTH_VERSION Version: ${{ env.AUTH_VERSION }}"
              echo "GENESIS_VERSION Version: ${{ env.GENESIS_VERSION }}"
              echo "SITE_OUTPUT Version: ${{ env.SITE_OUTPUT }}"
      - name: Product.yml existence
        run: |
              if [ -f "server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml" ]; then
                echo "PRESENCE=$(echo true)" >>$GITHUB_ENV
                echo true
              fi

      - name: Arbritrary Intermediary Step
        run: |
              echo ${{ env.PRESENCE }}

      - name: Create product.yml
        if: ${{ env.PRESENCE != 'true' }}
        run: |
              echo ${{ env.PRESENCE }}
              echo "GENESIS_USER: ${{ env.GENESIS_USER }}"
              mkdir -p server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt
              touch server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "genesis_user: ${{ env.GENESIS_USER }}" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "build_rpm: true" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "\ngenesis_products:\n" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "\tname: ${{ env.PRODUCT_NAME }}" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "\njava_packages:\n" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "\t- java-11-openjdk-devel" >> server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml
              echo "product.yml:"
              cat server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt/product.yml

      - name: Package + Deploy Site
        run: |
             sudo yum install zip
             cd ${{ env.HOME }}//server/jvm/
             mkdir site-specific
             cp -R ${{ env.PRODUCT_NAME }}-site-specific/src/main/resources/* site-specific
             zip -r  ${{ env.SITE_OUTPUT }} site-specific/*
             echo $(pwd)
             ls  -a
             curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/site/${{ env.CLIENT_NAME }}/" -T *.zip

      - name: assign module versions
        run: |

             echo "AUTH_VERSION=$(echo "$(echo "$(grep "implementation" server/jvm/${{ env.PRODUCT_NAME }}-deploy/build.gradle.kts -A 5 | grep "auth" -A 2 | grep "version" | cut -d"\"" -f2)")")" >> $GITHUB_ENV
             echo "GENESIS_VERSION=$(echo "$(echo "$(grep "implementation" server/jvm/${{ env.PRODUCT_NAME }}-deploy/build.gradle.kts -A 5 | grep "genesis-distribution" -A 2 | grep "version" | cut -d"\"" -f2)")")" >> $GITHUB_ENV

             if [ "$AUTH_VERSION" == "" ]; then
             echo "GENESIS_VERSION=$(grep "genesisVersion" $(find . -name gradle.properties) |  awk -F '=' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
             echo "AUTH_VERSION=$(grep "authVersion" $(find . -name gradle.properties) |  awk -F '=' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
             echo "FIX_VERSION=$(grep "^fixVersion" $(find . -name gradle.properties) |  awk -F '=' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
             fi

      - name: Download server, web and latest auth/genesis-distribution from JFROG
        run: |
             mkdir web_downloads
             mkdir server_downloads
             echo "current directory: $(pwd)"
             echo "files in pwd: $(ls -a)"
             #download auth distribution into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/auth-distribution/"${{env.AUTH_VERSION}}"/auth-distribution-"${{env.AUTH_VERSION}}"-bin.zip
             #download fix distribution into server_downloads folder
             if [[ -n "${{env.FIX_VERSION}}" ]];
             then
                wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/fix-distribution/"${{env.FIX_VERSION}}"/fix-distribution-"${{env.FIX_VERSION}}"-bin.zip
             fi
             #download genesis
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/genesis-distribution/"${{ env.GENESIS_VERSION }}"/genesis-distribution-"${{ env.GENESIS_VERSION }}"-bin.zip
             #download server into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/server/genesisproduct-"${{ env.PRODUCT_NAME }}"-"${{ env.SERVER_VERSION }}"-bin.zip
             #download server into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/site/"${{ env.CLIENT_NAME }}"/"${{ env.SITE_OUTPUT }}"


             #download modules into server_downloads folder
             cd server/jvm/${{ env.PRODUCT_NAME }}-site-specific/snt
             echo "this is the present directory: $(pwd)"
             if [[ $(grep -c "genesis_modules" ./product.yml) -ge 1 ]]; then   echo "$(sed -e '1,/genesis_modules/d'  < ./product.yml | grep "^  - { ")" > /tmp/edited_product.yml;   while read line; do echo
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/server_downloads https://genesisglobal.jfrog.io/artifactory/product/$((grep -oP '(?<=name:).*?(?=,)' <<< $line)|awk '$1=$1')/server/genesisproduct-$((grep -oP '(?<=name:).*?(?=,)' <<< $line) | awk '$1=$1')-$((grep -oP '(?<=version: )[^ ]*' <<< $line)|awk '$1=$1' )-bin.zip ;   done < /tmp/edited_product.yml;   rm /tmp/edited_product.yml; fi
             echo "this is the present directory: $(pwd)"
             echo "LIST of FILES: $(ls -a)"
             #download web
             echo "PWD after module download: $(pwd)"
             cd ../../../..
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}"/web_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/web/"${{ env.PRODUCT_NAME }}"-web-"${{ env.WEB_VERSION }}".zip
             cd web_downloads
             echo "this is the present directory: $(pwd)"
             echo "List of files in pwd:$(ls -a)"
             unzip -o \*.zip
             tar czvf /tmp/genesis_${{env.PRODUCT_NAME}}_web.tar.gz *
             cd ../server_downloads
             echo "displaying files in server_downloads folder: $(ls -a)"
             unzip -o \*.zip
             ls
             rm *.zip
             tar czvf /tmp/genesis_${{env.PRODUCT_NAME}}_package.tar.gz *
             ls -lart /tmp/*.tar*
        env:
          JAVA_TOOL_OPTIONS: ${{'-Xmx8192m' }}

      - name: Create RPM
        run: |

            sudo yum install rpm -y
            sudo yum install rpmdevtools -y
            touch pom.xml
            rm pom.xml
            cp ${{ env.PRODUCT_BASE }}/rpm/rpm/legacy/pom.xml pom.xml
            sed -i "s/PRODUCT/$PRODUCT_NAME/g" pom.xml
            if [ $(test -f /tmp/install.sh && echo 1 || echo 0) -eq 1  ]
            then
              rm /tmp/install.sh
              fi
            cp ${{ env.PRODUCT_BASE }}/rpm/rpm/legacy/install.sh /tmp/install.sh
            sed -i "s/product_name/$PRODUCT_NAME/g" /tmp/install.sh
            if [[ "$PRODUCT_NAME" == *"octo"* ]]
            then
              sed -i "s/genesisUser/octo/g" /tmp/install.sh
            else
              sed -i "s/genesisUser/$(echo $PRODUCT_NAME | sed -E 's/[0-9]+//g')/g" /tmp/install.sh
            fi
            /usr/local/apache-maven/bin/mvn versions:set -DnewVersion=$VERSION
            /usr/local/apache-maven/bin/mvn rpm:rpm
            ls -larth

      - name: Upload RPM
        run: |
          echo "PRODUCT NAME: ${{ env.PRODUCT_NAME }}"
          echo "RPM NAME: ${{ env.RPM_NAME }}"
          ls target/rpm/
          cd target/rpm/genesis-${PRODUCT_NAME}/RPMS/x86_64/${RPM_NAME}
          ls -lart
          echo "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/"
          curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/${{ env.CLIENT_NAME }}/" -T *.rpm

      - name: Notify failure on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: failure() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ❌ build-mono build for ${{ env.PRODUCT_NAME }} failed
          SLACK_MESSAGE: The build-mono build for ${{ github.workflow }} failed https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}
          SLACK_CHANNEL: ${{ env.PRODUCT_NAME }}-build-notifications

      - name: Notify success on Slack
        uses: bryannice/gitactions-slack-notification@2.0.0
        if: success() && env.SLACK_INCOMING_WEBHOOK
        env:
          SLACK_INCOMING_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: ✅ build-mono build for ${{ env.PRODUCT_NAME }} passed
          SLACK_MESSAGE: The build-mono build for ${{ github.workflow }} passed https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}
          SLACK_CHANNEL: ${{ env.PRODUCT_NAME }}-build-notifications
