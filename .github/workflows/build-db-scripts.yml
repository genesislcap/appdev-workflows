name: Server Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      artifact_location:
        required: true
        type: string
      product_name:
        required: false
        type: string
      module_name:
        required: false
        type: string   
      client:
        required: true
        type: string

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      SLACK_WEBHOOK:
        required: true
env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
          
      - name: Env Set-Up
        run: |
             echo "VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV 
             echo "REPO_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f2 | xargs)" >> $GITHUB_ENV                                                               
             echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV                                         
             echo "PRODUCT_BASE=$(readlink -f $(find . -name pom.xml) | rev | cut -c9- | rev | sort -n | head -n 1)" >> $GITHUB_ENV
             echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-server-$(git tag)-bin.zip" >> $GITHUB_ENV
 
      - name: Env Setup
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run: |
             echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
             echo "OUTPUT=genesis-${{ inputs.product_name }}-dbscripts-${{ env.VERSION }}.zip" >> $GITHUB_ENV
             
      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention
              
      - name: Env Setup for VERSION if module_name is present
        if: ${{ inputs.module_name }}
        run: |
              echo "VERSION=$(git describe --tags)" >> $GITHUB_ENV
     
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@1.0.0
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'
        env:
          JAVA_HOME: /opt/jdk

      - name: 'Publish Test Report'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'test-reports'
          path: ${{github.workspace}}/reports
          
      - name: Package
        run: |
            if [ -f ${{ env.PRODUCT_BASE}}/${{ env.OUTPUT }} ]; then
              rm -f ${{ env.PRODUCT_BASE}}/${{ env.OUTPUT }}
            fi
            
      - name: Publish to Artifactory 
        run: |
            cd ${{ env.PRODUCT_BASE }}/${{ inputs.artifact_location }}/
            curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/dbscript/rpm/${{ inputs.client }}" -T *.zip
            
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}     
