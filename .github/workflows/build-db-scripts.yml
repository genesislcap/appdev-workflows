name: Server Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      artifact_location:
        required: true
        type: string
      product_name:
        required: false
        type: string
      module_name:
        required: false
        type: string   
      client:
        required: true
        type: string

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true
      SLACK_WEBHOOK:
        required: true
env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'
          
      - name: Env Set-Up
        run: |
             echo "VERSION=$(git describe --tags | cut -d"_" -f2)" >> $GITHUB_ENV 
             echo "REPO_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f2 | xargs)" >> $GITHUB_ENV                                                               
             echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV                                         
             echo "PRODUCT_BASE=$(readlink -f $(find . -name pom.xml) | rev | cut -c9- | rev | sort -n | head -n 1)" >> $GITHUB_ENV
 
      - name: Env Setup
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run: |
             echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
             echo "OUTPUT=genesis-${{ env.PRODUCT_NAME }}-dbscripts-${{ env.VERSION }}.zip" >> $GITHUB_ENV
             
      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Set Output
        run: |
              echo "OUTPUT=genesis-${{ env.PRODUCT_NAME }}-dbscripts-${{ env.VERSION }}.zip" >> $GITHUB_ENV

      - name: Set outfilename
        run: |
              echo "outfilename=$(echo "${{ env.OUTPUT }}" | rev | cut -d. -f2- | rev).tar" >> $GITHUB_ENV

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@1.0.0
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'
        env:
          JAVA_HOME: /opt/jdk

      - name: 'Publish Test Report'
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: 'test-reports'
          path: ${{github.workspace}}/reports
          
      - name: Package
        run: |
            echo ${{ env.OUTPUT }}
            echo ${{ env.outfilename }}
            sudo apt install zip
            sudo apt install unzip
            cd ${{ env.PRODUCT_BASE }}/${{ env.PRODUCT_NAME }}-script-config/src/main/resources/scripts/sql
            zip -r ${{ env.PRODUCT_BASE }}/${{ env.OUTPUT }} release-sql
            cd ${{ env.PRODUCT_BASE }}
            
      - name: Convert to tar
        run: |
           mkdir ${{ env.PRODUCT_NAME }}-1
           cp "${{ env.OUTPUT }}" ${{ env.PRODUCT_NAME }}-1/
           (cd ${{ env.PRODUCT_NAME }}-1 && unzip -q "${{ env.OUTPUT }}")
           rm "${{ env.PRODUCT_NAME }}-1/${{ env.OUTPUT }}"
           (cd ${{ env.PRODUCT_NAME }}-1 && tar cf "${{ env.outfilename }}" * && gzip "${{ env.outfilename }}" )
           mv "${{ env.PRODUCT_NAME }}-1/${{ env.outfilename }}.gz" .
           rm -rf ${{ env.PRODUCT_NAME }}-1
           echo "Converted ${{ env.OUTPUT }} to ${{ env.outfilename }} as a tar zip file"
           pwd 
           echo "make a copy in the /tmp folder for the rpm to work"
           cp ${{ env.outfilename }}.gz /tmp
           ls -larth
           
      - name: Publish to Artifactory 
        run: |
            cd ${{ env.PRODUCT_BASE }}
            curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/dbscript/site/${{ inputs.client }}/" -T *.zip
            
      - name: Create RPM
        run: |
            sudo apt install rpm
            touch pom.xml
            rm pom.xml
            echo "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3QgeG1sbnM9Imh0dHA6Ly9tYXZlbi5hcGFjaGUub3JnL1BPTS80LjAuMCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICAgeHNpOnNjaGVtYUxvY2F0aW9uPSJodHRwOi8vbWF2ZW4uYXBhY2hlLm9yZy9QT00vNC4wLjAgaHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZCI+CiAgICA8bW9kZWxWZXJzaW9uPjQuMC4wPC9tb2RlbFZlcnNpb24+CiAgICA8Z3JvdXBJZD5nbG9iYWwuZ2VuZXNpczwvZ3JvdXBJZD4KICAgIDxhcnRpZmFjdElkPmdlbmVzaXMtcnBtPC9hcnRpZmFjdElkPgogICAgPHZlcnNpb24+MS4wLjA8L3ZlcnNpb24+CiAgICA8cGFja2FnaW5nPnBvbTwvcGFja2FnaW5nPgogICAgPG5hbWU+Z2VuZXNpcy1ycG08L25hbWU+CiAgICA8cHJvcGVydGllcz4KCQk8cHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz5VVEYtODwvcHJvamVjdC5idWlsZC5zb3VyY2VFbmNvZGluZz4KCTwvcHJvcGVydGllcz4KICAgIDxtb2R1bGVzLz4KICAgIDxidWlsZD4KICAgICAgICA8cGx1Z2lucz4KICAgICAgICAgICAgPHBsdWdpbj4KICAgICAgICAgICAgICAgIDxncm91cElkPm9yZy5jb2RlaGF1cy5tb2pvPC9ncm91cElkPgogICAgICAgICAgICAgICAgPGFydGlmYWN0SWQ+cnBtLW1hdmVuLXBsdWdpbjwvYXJ0aWZhY3RJZD4KICAgICAgICAgICAgICAgIDx2ZXJzaW9uPjIuMi4wPC92ZXJzaW9uPgogICAgICAgICAgICAgICAgPGluaGVyaXRlZD5mYWxzZTwvaW5oZXJpdGVkPgogICAgICAgICAgICAgICAgPGNvbmZpZ3VyYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+Z2VuZXNpcy1QUk9EVUNUPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDxsaWNlbnNlPihjKSBnZW5lc2lzLmdsb2JhbDwvbGljZW5zZT4KICAgICAgICAgICAgICAgICAgICA8bmVlZGFyY2g+eDg2XzY0PC9uZWVkYXJjaD4KICAgICAgICAgICAgICAgICAgICA8Z3JvdXA+R2VuZXNpcyBQbGF0Zm9ybTwvZ3JvdXA+CiAgICAgICAgICAgICAgICAgICAgPHBvc3RpbnN0YWxsU2NyaXB0bGV0PgogICAgICAgICAgICAgICAgICAgICAgICA8c2NyaXB0RmlsZT4vdG1wL2RiaW5zdGFsbC5zaDwvc2NyaXB0RmlsZT4KICAgICAgICAgICAgICAgICAgICA8L3Bvc3RpbnN0YWxsU2NyaXB0bGV0PgogICAgICAgICAgICAgICAgICAgIDxtYXBwaW5ncz4KCQkJPG1hcHBpbmc+CgkJCSAgICA8ZGlyZWN0b3J5Pi90bXAvPC9kaXJlY3Rvcnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmlsZW1vZGU+MTc3NzwvZmlsZW1vZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dXNlcm5hbWU+cm9vdDwvdXNlcm5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z3JvdXBuYW1lPnJvb3Q8L2dyb3VwbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2VzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2U+CgkJCQkJPGxvY2F0aW9uPi90bXAvZ2VuZXNpcy1QUk9EVUNULXBhY2thZ2VWZXJzaW9uLnRhci5nejwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWFwcGluZz4KICAgICAgICAgICAgICAgICAgICA8L21hcHBpbmdzPgogICAgICAgICAgICAgICAgPC9jb25maWd1cmF0aW9uPgogICAgICAgICAgICA8L3BsdWdpbj4KICAgICAgICA8L3BsdWdpbnM+CiAgICA8L2J1aWxkPgo8L3Byb2plY3Q+Cg==" | base64 -d > pom.xml
            sed -i "s/PRODUCT/${{ env.PRODUCT_NAME }}-dbscripts/g" pom.xml
            sed -i "s/packageVersion/${{ env.VERSION }}/g" pom.xml
            if [ $(test -f /tmp/dbinstall.sh && echo 1 || echo 0) -eq 1 ]
            then
              rm /tmp/dbinstall.sh
            fi
            echo "IyEvdXNyL2Jpbi9lbnYgYmFzaAoKZWNobyAic2V0dGluZyB1cCB0aGUgcmVkaXJlY3RzIGZvciBzdGRvdXQgYW5kIHN0ZGVycm9yIGZyb20gdGhlIHJwbSB0byB0aGUgcGFyZW50IHl1bSIKCmV4ZWMgMT4vcHJvYy8kUFBJRC9mZC8xCmV4ZWMgMj4vcHJvYy8kUFBJRC9mZC8yCgplY2hvICJTZXR0aW5nIHRoZSBnZW5lc2lzIHVzZXIgYW5kIGdyb3VwcyB0byBydW4gdGhlIGNvbW1hbmQiCgpnZW5lc2lzX3VzZXI9ImdlbmVzaXNVc2VyIgpnZW5lc2lzX2dycD0iZ2VuZXNpc1VzZXIiCnJvb3RfZGlyPSJkYXRhIgpzZXJ2ZXJfZGlyPSQoZGF0ZSArJVklbSVkLSVIJU0pCgojRXh0cmFjdCBkaXJlY3Rvcnkgc3RydWN0dXJlCmVjaG8gIlNldHRpbmcgdXAgYSBuZXcgZGlyIHRvIGV4dHJhY3QgdGhlIHNxbCBmaWxlcyBmcm9tIHRoZSBycG0iCgpta2RpciAtcCAvJHJvb3RfZGlyLyRnZW5lc2lzX3VzZXIvc2VydmVyL3Bvc3RncmVzLyRzZXJ2ZXJfZGlyCmNkIC8kcm9vdF9kaXIvJGdlbmVzaXNfdXNlci9zZXJ2ZXIvcG9zdGdyZXMvJHNlcnZlcl9kaXIKdGFyIC14emYgL3RtcC9nZW5lc2lzLXByb2R1Y3RfbmFtZS1kYnNjcmlwdHMtdmVyc2lvbi50YXIuZ3ogJj4gL2Rldi9udWxsCnJtIC1mIC90bXAvZ2VuZXNpcy1wcm9kdWN0X25hbWUtZGJzY3JpcHRzLXZlcnNpb24udGFyLmd6CmNkIHJlbGVhc2Utc3FsCgplY2hvICJTZXR0aW5nIHVwIHRoZSB2YXJpYWJsZXMgcmVxdWlyZWQgZm9yIHJ1bm5pbmcgdGhlIHBvc3RncmVzcyBDTEkuLi4uIgpwYXNzZmlsZT0iL2hvbWUvJGdlbmVzaXNfdXNlci8ucGdwYXNzIgppZiBbWyAtZiAkcGFzc2ZpbGUgXV07IHRoZW4KICBlY2hvICJwb3N0Z3JlcyBjbGkgc2V0dGluZyBmaWxlcyBwcmVzZW50Li4uIgogIHdoaWxlIHJlYWQgbGluZQogICAgZG8KCSAgcmRzX2hvc3Q9JChlY2hvICRsaW5lIHwgY3V0IC1kIjoiIC1mMSkKCSAgcG9ydD0kKGVjaG8gJGxpbmUgfCBjdXQgLWQiOiIgLWYyKQoJICBkYXRhYmFzZV9uYW1lPSQoZWNobyAkbGluZSB8IGN1dCAtZCI6IiAtZjMpCgkgIHVzZXJfbmFtZT0kKGVjaG8gJGxpbmUgfCBjdXQgLWQiOiIgLWY0KQoJICBQU1FMX1BBU1NXRD0kKGVjaG8gJGxpbmUgfCBjdXQgLWQiOiIgLWY1KQogIGRvbmUgPCAkcGFzc2ZpbGUKZmkKCgppZiBbWyAtbiAkKCBob3N0bmFtZSB8IGdyZXAgYXhlczEpIF1dOyB0aGVuIAogIHNjaGVtYT0iZGV2X2F4ZXMxIgpmaQoKaWYgW1sgLW4gJCggaG9zdG5hbWUgfCBncmVwIGF4ZXMyKSBdXTsgdGhlbiAKICBzY2hlbWE9ImRldl9heGVzMiIKZmkKCmlmIFtbIC1uICQoIGhvc3RuYW1lIHwgZ3JlcCBheGVzNCkgXV07IHRoZW4gCiAgc2NoZW1hPSJkZXZfYXhlczQiCmZpCgppZiBbWyAtbiAkKCBob3N0bmFtZSB8IGdyZXAgYXhlczUpIF1dOyB0aGVuIAogIHNjaGVtYT0iZGV2X2F4ZXM1IgpmaQoKaWYgW1sgLW4gJCggaG9zdG5hbWUgfCBncmVwIGF4ZXM3KSBdXTsgdGhlbiAKICBzY2hlbWE9ImRldl9heGVzNyIKZmkKCmlmIFtbIC1uICQoIGhvc3RuYW1lIHwgZ3JlcCBsb2FkKSBdXTsgdGhlbiAKICBzY2hlbWE9Im5lcHR1bmVfbG9hZCIKZmkKCmlmIFtbIC1uICQoIGhvc3RuYW1lIHwgZ3JlcCB1YXQpIF1dOyB0aGVuIAogIHNjaGVtYT0idWF0Ml9heGVzIgpmaQoKaWYgW1sgLW4gJCggaG9zdG5hbWUgfCBncmVwIHByb2QpIF1dOyB0aGVuIAogIHNjaGVtYT0ibmVwdHVuZV9wcm9kIgpmaQoKCgppZiBbIC16ICR1c2VyX25hbWUgXTsgdGhlbgogIGVjaG8gIlBsZWFzZSBlbnRlciB0aGUgdXNlcm5hbWUgZm9yIHRoZSBkYiBjb25uZWN0aW9uIgogIGV4aXQKZmkKCmlmIFsgLXogJHJkc19ob3N0IF07IHRoZW4KICBlY2hvICJQbGVhc2UgZW50ZXIgdGhlIHJkcyBob3N0IGZvciB0aGUgZGIgY29ubmVjdGlvbiIKICBleGl0CmZpCgppZiBbIC16ICRkYXRhYmFzZV9uYW1lIF07IHRoZW4KICBlY2hvICJQbGVhc2UgZW50ZXIgdGhlIGRhdGFiYXNlIG5hbWUgZm9yIHRoZSBkYiBjb25uZWN0aW9uIgogIGV4aXQKZmkKCmlmIFsgLXogJHNjaGVtYSBdOyB0aGVuCiAgZWNobyAiUGxlYXNlIGVudGVyIHRoZSBzY2hlbWEgbmFtZSBmb3IgdGhlIGRiIGZpbGUiCmV4aXQKZmkKCmZvciBpIGluICQobHMgLWxBIHwgYXdrIC1GJzpbMC05XSogJyAnLzove3ByaW50ICQyfScpOyBkbyAKICBpZiBbICQodGVzdCAteiAkaSAmJiBlY2hvIDAgfHwgZWNobyAxKSAtZXEgMSAgXTsgdGhlbgogICAgc2VkIC1pICJzL1NDSEVNQV9OQU1FLyRzY2hlbWEvZyIgJGkKICAgIFBHUEFTU1dPUkQ9JFBTUUxfUEFTU1dEICBwc3FsIC1VICR1c2VyX25hbWUgIC1oICRyZHNfaG9zdCAgJGRhdGFiYXNlX25hbWUgLWYgJGkKICBmaQpkb25lCg==" | base64 -d > /tmp/dbinstall.sh
            sed -i "s/genesisUser/${{ env.PRODUCT_NAME }}/g" /tmp/dbinstall.sh
            sed -i "s/product_name/${{ env.PRODUCT_NAME }}/g" /tmp/dbinstall.sh
            sed -i "s/version/${{ env.VERSION }}/g" /tmp/dbinstall.sh
            mvn versions:set -DnewVersion=${{ env.VERSION }}
            mvn rpm:rpm
            find ~/ -name "*.rpm"
            ls
          
      - name: Publish RPM to Artifactory
        run: |
            cd ${{ env.PRODUCT_BASE }}/target/rpm/genesis-${{ env.PRODUCT_NAME }}-dbscripts/RPMS/x86_64/
            curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/dbscript/rpm/${{ inputs.client }}/" -T *.rpm
        
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}     
