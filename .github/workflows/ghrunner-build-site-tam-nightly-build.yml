# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Site Deploy

on:
  workflow_call:
    outputs:
        rpm_name:
          description: "The first output string"
          value: ${{ jobs.build.outputs.rpm_name }}
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      product_name:
        required: false
        type: string
      nginx-conf:
        required: false
        type: string
        description: Optional nginx override

      snt_path:
        required: false
        type: string

    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true

env:
  REPO_NAME: ${{ inputs.repo_name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      GITTAG: ${{ github.ref_name }}
    runs-on: appdev-selfhosted

    outputs:
      rpm_name: ${{ steps.upload-rpm.outputs.uploaded_rpm_name }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - uses: actions/checkout@v3
        with:
          repository: genesislcap/appdev-workflows
          path: ./rpm
          sparse-checkout: |
            rpm/legacy

      - name: Env Variable Setup for nightly builds off default-branch
        if: ${{ inputs.branch == 'develop'|| inputs.branch == 'f/DCD-926' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run: |
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              echo "The current location is :"
              pwd

              cd /opt/actions-runner/_work/tam2-site-specific/tam2-site-specific/tam2-site-specific-arden

              # Loop through all items in the current directory
              for i in ./*
              do
                  # Check if the item is a directory named "snt"
                  if [ "$i" == "./snt" ]
                  then
                      echo "check1"
                      # Check if product.yml exists in the directory
                      if [ -f "$i/product.yml" ]
                      then
                          echo "check2"
                          # Extract web_version and server_version from product.yml
                          WEB_VERSION=$(grep "web_version" "$i/product.yml" | awk -F ':' '{print $2}' | sed 's/ //g')
                          SERVER_VERSION=$(grep "server_version" "$i/product.yml" | awk -F ':' '{print $2}' | sed 's/ //g')

                          # Print the extracted versions
                          echo "WEB_VERSION: $WEB_VERSION"
                          echo "SERVER_VERSION: $SERVER_VERSION"
                      else
                          echo "product.yml not found in $i"
                      fi
                  else
                      echo "$i is not a client directory"
                  fi
              done



              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-${{ inputs.branch }}.zip" >> $GITHUB_ENV
              [[ ! -z "$WEB_VERSION" ]] && echo "WEB_VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              [[ ! -z "$SERVER_VERSION" ]] && echo "SERVER_VERSION=${{ inputs.branch }}" >> $GITHUB_ENV

      - name: Env Variable setup for auth and genesis fw versions
        run: |
             set +x -e
             curl -sSf -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -LO 'https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/server/pom-${{ env.SERVER_VERSION }}.xml'
             echo pom-${{ env.SERVER_VERSION }}.xml
             echo "AUTH_VERSION=$(echo "$(echo "$(grep -m 1 "<auth.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<auth.version>\(.*\)</auth.version>.*:\1:p')")")" >> $GITHUB_ENV
             echo "GENESIS_VERSION=$(echo "$(echo "$(grep -m 1 "<genesis.version>" $(find . -maxdepth 1 -name pom-${{env.SERVER_VERSION}}.xml) | sed -n 's:.*<genesis.version>\(.*\)</genesis.version>.*:\1:p')")")" >> $GITHUB_ENV

      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: check env variables
        run: |
              echo "$(git describe --tags)"
              echo "Product Name: ${{ env.PRODUCT_NAME }}"
              echo "Version: ${{ env.VERSION }}"
              echo "Product Base: ${{ env.PRODUCT_BASE }}"
              echo "Output: ${{ env.OUTPUT }}"
              echo "SERVER_VERSION: ${{ env.SERVER_VERSION }}"
              echo "WEB_VERSION: ${{ env.WEB_VERSIOB }}"
              echo "AUTH_VERSION: ${{ env.AUTH_VERSION }}"
              echo "GENESIS_VERSION fw : ${{ env.GENESIS_VERSION }}"

      - name: Download genesis_framework, pom, server artifacts
        run: |
             set +x -e
             #download auth distribution into server_downloads folder
             mkdir distros
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros" https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/auth-distribution/"${{env.AUTH_VERSION}}"/auth-distribution-"${{env.AUTH_VERSION}}"-bin.zip
             #download genesis framework
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros" https://genesisglobal.jfrog.io/artifactory/libs-release-local/global/genesis/genesis-distribution/"${{ env.GENESIS_VERSION }}"/genesis-distribution-"${{ env.GENESIS_VERSION }}"-bin.zip
             #download server into server_downloads folder
             wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P "${{env.PRODUCT_BASE}}/distros"  https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/server/genesisproduct-"${{ env.PRODUCT_NAME }}"-"${{ env.SERVER_VERSION }}"-bin.zip


      - name: Package + Deploy Site per client
        run: |
             sudo yum install zip -y
             sudo yum install rpmdevtools -y
             cd ${{ env.PRODUCT_BASE }}
             echo "This is the base directory->" && echo "$(pwd)"
             for i in ./*
              do
                if [ "$i" == "./snt" ]
                then
                    CLIENT_DIR=""
                    CLIENT_NAME="genesis"
                    echo "Client directory is empty-->" && echo "$CLIENT_DIR"
                    echo "Client name is-->" && echo "$CLIENT_NAME"
                    echo "Create client specific server downloads dir for rpm creation-->" && mkdir "$CLIENT_NAME"_server_downloads
                    echo "Create client specific web downloads dir for rpm creation-->" && mkdir "$CLIENT_NAME"_web_downloads
                    echo "Change location to the client specific src directory-->" && cd ${{ env.PRODUCT_BASE }}/src
                    echo "Create and upload artifact contaiing files from src/site-specific/ usually cfg and assembly folders to jfrog"
                    zip -r ${{ env.PRODUCT_BASE }}/snt/${{ env.OUTPUT }} site-specific/*
                    curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/site/$CLIENT_NAME/${{env.OUTPUT}}" -T ${{ env.PRODUCT_BASE }}/snt/${{env.OUTPUT}}
                    cp ${{ env.PRODUCT_BASE }}/snt/${{env.OUTPUT}} ${{env.PRODUCT_BASE}}/"$CLIENT_NAME"_server_downloads
                    cd ${{ env.PRODUCT_BASE }}
                    if [[ $(grep -c "genesis_modules" ./snt/product.yml) -ge 1 ]]; then
                        set +x -e
                        echo "$(sed -e '1,/genesis_modules/d'  < ./snt/product.yml | grep "^  - { ")" > /tmp/"$CLIENT_NAME"_edited_product.yml
                        while read line
                          do
                            echo "Reading this line from product.yml now  -- $line"
                            wget --user=${{ secrets.JFROG_USERNAME }} --password="${{secrets.JFROG_PASSWORD}}" -P ${{env.PRODUCT_BASE}}/"$CLIENT_NAME"_server_downloads https://genesisglobal.jfrog.io/artifactory/product/$((grep -oP '(?<=name:).*?(?=,)' <<< $line)|awk '$1=$1')/server/genesisproduct-$((grep -oP '(?<=name:).*?(?=,)' <<< $line) | awk '$1=$1')-$((grep -oP '(?<=version: )[^ ]*' <<< $line)|awk '$1=$1' )-bin.zip
                          done < /tmp/"$CLIENT_NAME"_edited_product.yml
                        echo "Modules required for $CLIENT_NAME required are-->" && cat /tmp/"$CLIENT_NAME"_edited_product.yml
                        rm /tmp/"$CLIENT_NAME"_edited_product.yml
                    fi
                    cd ${{ env.PRODUCT_BASE }}
                    if [ "${{ env.WEB_VERSION }}" == "" ]; then
                      echo "Product Name: ${{ env.PRODUCT_NAME }} does not have a requirement for web, creating an empty zipped up folder for deployment requirements"
                      cd "$CLIENT_NAME"_web_downloads
                      touch temp
                      if [ -n "${{ inputs.nginx-conf }}" ]; then
                        cp "${GITHUB_WORKSPACE}/${{ inputs.nginx-conf }}" ./nginx.conf
                      fi
                      tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
                      cd ../"$CLIENT_NAME"_server_downloads
                    else
                      cd "$CLIENT_NAME"_web_downloads
                      wget --user=${{ secrets.JFROG_USERNAME }} --password="${{ secrets.JFROG_PASSWORD }}" -P ${{ env.PRODUCT_BASE }}/"$CLIENT_NAME"_web_downloads https://genesisglobal.jfrog.io/artifactory/product/"${{ env.PRODUCT_NAME }}"/web/"${{ env.PRODUCT_NAME }}"-web-"${{ env.WEB_VERSION }}".zip
                      unzip \*.zip
                      if [ -n "${{ inputs.nginx-conf }}" ]; then
                        cp "${GITHUB_WORKSPACE}/${{ inputs.nginx-conf }}" ./nginx.conf
                      fi
                      tar czvf /tmp/genesis_${{ env.PRODUCT_NAME }}_web.tar.gz *
                      cd ../"$CLIENT_NAME"_server_downloads
                    fi
                    cp -r ${{env.PRODUCT_BASE}}/distros/*   ${{env.PRODUCT_BASE}}/"$CLIENT_NAME"_server_downloads/
                    unzip \*.zip
                    rm *.zip
                    tar czvf /tmp/genesis_${{env.PRODUCT_NAME}}_package.tar.gz *
                    cp ${{ env.PRODUCT_BASE }}/rpm/rpm/legacy/pom.xml pom.xml
                    sed -i "s/PRODUCT/$PRODUCT_NAME/g" pom.xml
                    if [ $(test -f /tmp/install.sh && echo 1 || echo 0) -eq 1  ]
                    then
                      rm /tmp/install.sh
                    fi
                    cp ${{ env.PRODUCT_BASE }}/rpm/rpm/legacy/install.sh /tmp/install.sh
                    sed -i "s/product_name/$PRODUCT_NAME/g" /tmp/install.sh
                    if [[ "$PRODUCT_NAME" == "wm_aqs" ]]
                    then
                        sed -i "s/genesisUser/aqs/g" /tmp/install.sh
                    else
                        sed -i "s/genesisUser/$(echo $PRODUCT_NAME | sed -E 's/[0-9]+//g')/g" /tmp/install.sh
                    fi
                    source ~/.bashrc
                    mvn versions:set -DnewVersion=$VERSION
                    mvn rpm:rpm
                    cd target/rpm/genesis-${PRODUCT_NAME}/RPMS/x86_64/${RPM_NAME}
                    curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/rpm/$CLIENT_NAME/" -T *.rpm
                  else
                    echo "$i is not a directory or does not have a snt folder in it"
                  fi
              cd ${{ env.PRODUCT_BASE }}
              done

      - name: GET  RPM NAME
        id: upload-rpm
        run: |
          CLIENT_NAME="genesis"
          cd ${{env.PRODUCT_BASE}}/"$CLIENT_NAME"_server_downloads/target/rpm/genesis-${PRODUCT_NAME}/RPMS/x86_64
          ls -al
          uploaded_rpm_name=$(ls -1 *.rpm)
          echo "uploaded_rpm_name=$uploaded_rpm_name" >> $GITHUB_OUTPUT
