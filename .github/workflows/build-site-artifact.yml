# This is a workflow to being called from appdev-devops repo in genesiscicd
#  NPM web build workflow v0.0.1

name: Site Deploy

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
      product_name:
        required: false
        type: string
  
    secrets:
      JFROG_USERNAME:
        required: true
      JFROG_EMAIL:
        required: true
      JFROG_PASSWORD:
        required: true

env:
  REPO_NAME: ${{ inputs.repo_name }}
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    env:
      JFROG_USERNAME: ${{secrets.JFROG_USERNAME}}
      JFROG_EMAIL: ${{secrets.JFROG_EMAIL}}
      JFROG_PASSWORD: ${{secrets.JFROG_PASSWORD}}
      GITTAG: ${{ github.ref_name }}
    runs-on: appdev-selfhosted

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          
      - name: GitHub Tag Name example
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Environment Variables
        run: |
              if [[ "$REPO_NAME" == "axes-gateway-site-specific" ]]  
              then
               echo "PRODUCT_NAME=axes-gateway">> $GITHUB_ENV               
               echo "OUTPUT=axes-gateway-site-specific-$( echo ${{ github.ref_name }} | cut -d"_" -f2).zip" >> $GITHUB_ENV              
              else
                echo "PRODUCT_NAME=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)" >> $GITHUB_ENV #NOTE: only works with SSH repo urls + will cause issues with bny_investments
                echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-$(echo ${{  github.ref_name }} | cut -d"_" -f2).zip" >> $GITHUB_ENV
              fi

              echo "VERSION=$(echo ${{ github.ref_name }} | cut -d"_" -f2)" >> $GITHUB_ENV
              echo "PRODUCT_BASE=$(pwd)" >> $GITHUB_ENV
              echo "CLIENT_DIR=$([[ $(echo ${{ github.ref_name }}) = [A-Z]* ]] && echo $(ls | grep -- $(echo -${{ github.ref_name }} | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]") | rev | cut -c 1- | rev))" >> $GITHUB_ENV
              echo "CLIENT_NAME=$([[ $(echo ${{ github.ref_name }}) = [A-Z]* ]] && echo $(ls | grep -- $(echo -${{ github.ref_name }} | cut -d"_" -f1 | tr "[:upper:]" "[:lower:]") | rev | cut -c 1- | rev | cut -c 1- | rev | cut -d"-" -f 1 | rev ))" >> $GITHUB_ENV              
              
      - name: Environment Variables for web and server
        run: |
              
              echo "WEB_VERSION=$(grep "web_version" $(find ${{ env.CLIENT_DIR }}/snt/ -name product.yml) | awk -F ':' '{print $2}' | sed 's/ //g')" >> $GITHUB_ENV
              echo "SERVER_VERSION=$(grep "server_version" $(find  ${{ env.CLIENT_DIR }}/snt/ -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
              
      - name: Env Setup for PRODUCT_NAME for repos not following a conventions
        if: ${{ inputs.product_name }}
        run: |
              echo "PRODUCT_NAME=${{ inputs.product_name }}" >> $GITHUB_ENV #NOTE: only for those that are not following a standard naming convention

      - name: Env Setup for nightly builds off default-branch
        if: ${{ inputs.branch == 'develop' ||  inputs.branch == 'main' ||  inputs.branch == 'master' || inputs.branch == '0.0.0' }}
        run: |
              echo "VERSION=${{ inputs.branch }}" >> $GITHUB_ENV
              for i in ./*
              do 
                  if [ -d "$i/snt" ]
                  then
                    echo "WEB_VERSION=$(grep "web_version" $(find $i/snt/ -name product.yml) | awk -F ':' '{print $2}' | sed 's/ //g')" >> $GITHUB_ENV
                    echo "SERVER_VERSION=$(grep "server_version" $(find  $i/snt/ -name product.yml) |  awk -F ':' '{print $2}'| sed 's/ //g')" >> $GITHUB_ENV
                    sed -i "s/${{ env.WEB_VERSION }}/develop/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                    sed -i "s/${{ env.SERVER_VERSION }}/develop/g" ${{ env.PRODUCT_BASE }}/$i/snt/product.yml
                  else
                    echo "not a directory"
                 fi
              done
              echo "OUTPUT=$(git config --get remote.origin.url | cut -d"." -f2 | cut -d"/" -f3 | cut -d"-" -f1 | cut -d"_" -f2)-site-specific-${{ inputs.branch }}.zip" >> $GITHUB_ENV

      - name: check env variables
        run: |
              echo "${{ github.ref_name }}"
              echo "Product Name: ${{ env.PRODUCT_NAME }}"
              echo "Version: ${{ env.VERSION }}"
              echo "Product Base: ${{ env.PRODUCT_BASE }}"
              echo "Output: ${{ env.OUTPUT }}"
              echo "Client Directory: ${{ env.CLIENT_DIR }}"
              echo "Client Name is : ${{ env.CLIENT_NAME }}"
              echo "Web Version: ${{ env.WEB_VERSION }}"
              echo "Server Version: ${{ env.SERVER_VERSION }}"
              if [[ -z  "${{ env.CLIENT_NAME }}" ]]
              then
                echo "Check your Tag naming convention. It should be CLIENTNAME_[a-zA-Z]-[0-9].[0-9].[0-9]"
                exit 1
              fi
              
      - name: Package + Deploy Site
        run: |
             sudo yum install zip
             cd ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/src
             zip -r ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{ env.OUTPUT }} site-specific/*
             echo $(pwd)
             ls -a
             curl -u ${{ secrets.JFROG_USERNAME }}:"${{secrets.JFROG_PASSWORD}}" -X PUT "https://genesisglobal.jfrog.io/artifactory/product/${{ env.PRODUCT_NAME }}/site/${{env.CLIENT_NAME}}/${{env.OUTPUT}}" -T ${{ env.PRODUCT_BASE }}/${{ env.CLIENT_DIR }}/${{env.OUTPUT}}
